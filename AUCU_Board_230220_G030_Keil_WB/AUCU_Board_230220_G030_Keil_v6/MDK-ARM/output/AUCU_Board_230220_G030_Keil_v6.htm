<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\AUCU_Board_230220_G030_Keil_v6.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\AUCU_Board_230220_G030_Keil_v6.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Tue Jun 13 09:52:36 2023
<BR><P>
<H3>Maximum Stack Usage =        304 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; MX_MotorControl_Init &rArr; MCboot &rArr; STO_PLL_Init &rArr; STO_PLL_Clear
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[15]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">NMI_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[f]">ASPEP_RXframeProcess</a> from aspep.o(.text.ASPEP_RXframeProcess) referenced 2 times from mcp_config.o(.data.aspepOverUartA)
 <LI><a href="#[d]">ASPEP_getBuffer</a> from aspep.o(.text.ASPEP_getBuffer) referenced 2 times from mcp_config.o(.data.aspepOverUartA)
 <LI><a href="#[e]">ASPEP_sendPacket</a> from aspep.o(.text.ASPEP_sendPacket) referenced 2 times from mcp_config.o(.data.aspepOverUartA)
 <LI><a href="#[23]">DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[21]">DMA1_Channel1_IRQHandler</a> from stm32g0xx_mc_it.o(.text.DMA1_Channel1_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[22]">DMA1_Channel2_3_IRQHandler</a> from stm32g0xx_mc_it.o(.text.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1e]">EXTI0_1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1f]">EXTI2_3_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[20]">EXTI4_15_IRQHandler</a> from stm32g0xx_mc_it.o(.text.EXTI4_15_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1c]">FLASH_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[16]">HardFault_Handler</a> from stm32g0xx_mc_it.o(.text.HardFault_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2b]">I2C1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2c]">I2C2_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[15]">NMI_Handler</a> from stm32g0xx_it.o(.text.NMI_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from stm32g0xx_it.o(.text.PendSV_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[3]">R3_1_CurrentReadingCalibration</a> from r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_CurrentReadingCalibration) referenced 2 times from mc_config.o(.data.PWM_Handle_M1)
 <LI><a href="#[8]">R3_1_GetOffsetCalib</a> from r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_GetOffsetCalib) referenced 2 times from mc_config.o(.data.PWM_Handle_M1)
 <LI><a href="#[0]">R3_1_GetPhaseCurrents</a> from r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_GetPhaseCurrents) referenced 2 times from mc_config.o(.data.PWM_Handle_M1)
 <LI><a href="#[34]">R3_1_HFCurrentsCalibrationAB</a> from r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_HFCurrentsCalibrationAB) referenced from r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_CurrentReadingCalibration)
 <LI><a href="#[35]">R3_1_HFCurrentsCalibrationC</a> from r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_HFCurrentsCalibrationC) referenced from r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_CurrentReadingCalibration)
 <LI><a href="#[6]">R3_1_IsOverCurrentOccurred</a> from r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_IsOverCurrentOccurred) referenced 2 times from mc_config.o(.data.PWM_Handle_M1)
 <LI><a href="#[33]">R3_1_SetADCSampPointCalibration</a> from r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_SetADCSampPointCalibration) referenced from r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_CurrentReadingCalibration)
 <LI><a href="#[5]">R3_1_SetADCSampPointSectX</a> from r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_SetADCSampPointSectX) referenced 2 times from mc_config.o(.data.PWM_Handle_M1)
 <LI><a href="#[7]">R3_1_SetOffsetCalib</a> from r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_SetOffsetCalib) referenced 2 times from mc_config.o(.data.PWM_Handle_M1)
 <LI><a href="#[1]">R3_1_SwitchOffPWM</a> from r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_SwitchOffPWM) referenced 2 times from mc_config.o(.data.PWM_Handle_M1)
 <LI><a href="#[2]">R3_1_SwitchOnPWM</a> from r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_SwitchOnPWM) referenced 2 times from mc_config.o(.data.PWM_Handle_M1)
 <LI><a href="#[4]">R3_1_TurnOnLowSides</a> from r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_TurnOnLowSides) referenced 2 times from mc_config.o(.data.PWM_Handle_M1)
 <LI><a href="#[1d]">RCC_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1b]">RTC_TAMP_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[14]">Reset_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[b]">STO_OTF_ResetPLL</a> from sto_pll_speed_pos_fdbk.o(.text.STO_OTF_ResetPLL) referenced 2 times from mc_config.o(.data.STO_M1)
 <LI><a href="#[9]">STO_PLL_ForceConvergency1</a> from sto_pll_speed_pos_fdbk.o(.text.STO_PLL_ForceConvergency1) referenced 2 times from mc_config.o(.data.STO_M1)
 <LI><a href="#[a]">STO_PLL_ForceConvergency2</a> from sto_pll_speed_pos_fdbk.o(.text.STO_PLL_ForceConvergency2) referenced 2 times from mc_config.o(.data.STO_M1)
 <LI><a href="#[c]">STO_PLL_IsVarianceTight</a> from sto_pll_speed_pos_fdbk.o(.text.STO_PLL_IsVarianceTight) referenced 2 times from mc_config.o(.data.STO_M1)
 <LI><a href="#[17]">SVC_Handler</a> from stm32g0xx_it.o(.text.SVC_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from stm32g0xx_mc_it.o(.text.SysTick_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[31]">SystemInit</a> from system_stm32g0xx.o(.text.SystemInit) referenced from startup_stm32g030xx.o(.text)
 <LI><a href="#[28]">TIM14_IRQHandler</a> from stm32g0xx_it.o(.text.TIM14_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[29]">TIM16_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2a]">TIM17_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from stm32g0xx_mc_it.o(.text.TIM1_BRK_UP_TRG_COM_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[11]">UASPEP_IDLE_ENABLE</a> from usart_aspep_driver.o(.text.UASPEP_IDLE_ENABLE) referenced 2 times from mcp_config.o(.data.aspepOverUartA)
 <LI><a href="#[10]">UASPEP_INIT</a> from usart_aspep_driver.o(.text.UASPEP_INIT) referenced 2 times from mcp_config.o(.data.aspepOverUartA)
 <LI><a href="#[12]">UASPEP_RECEIVE_BUFFER</a> from usart_aspep_driver.o(.text.UASPEP_RECEIVE_BUFFER) referenced 2 times from mcp_config.o(.data.aspepOverUartA)
 <LI><a href="#[13]">UASPEP_SEND_PACKET</a> from usart_aspep_driver.o(.text.UASPEP_SEND_PACKET) referenced 2 times from mcp_config.o(.data.aspepOverUartA)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32g0xx_mc_it.o(.text.USART2_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1a]">WWDG_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[32]">__main</a> from __main.o(!!!main) referenced from startup_stm32g030xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[38]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[125]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[126]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[127]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[128]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[129]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[130]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[131]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[132]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[133]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[134]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[135]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[136]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[137]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[138]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[139]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[41]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[13e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[13f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[140]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[141]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[142]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[143]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[144]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[37]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[145]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[39]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[146]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_MotorControl_Init &rArr; MCboot &rArr; STO_PLL_Init &rArr; STO_PLL_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[50]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[40]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[148]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[42]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_dataLog
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[14]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcAvrgMecSpeedUnit
</UL>

<P><STRONG><a name="[14a]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_dataLog
</UL>

<P><STRONG><a name="[14b]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[46]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_Clear
</UL>

<P><STRONG><a name="[14c]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[14f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_GetAvrgElMotorPowerW
</UL>

<P><STRONG><a name="[152]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[153]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3f]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[154]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[155]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>ASPEP_HWDMAReset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aspep.o(.text.ASPEP_HWDMAReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ASPEP_HWDMAReset
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[53]"></a>ASPEP_HWDataReceivedIT</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, aspep.o(.text.ASPEP_HWDataReceivedIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ASPEP_HWDataReceivedIT
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>ASPEP_HWDataTransmittedIT</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, aspep.o(.text.ASPEP_HWDataTransmittedIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ASPEP_HWDataTransmittedIT
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[f]"></a>ASPEP_RXframeProcess</STRONG> (Thumb, 1480 bytes, Stack size 72 bytes, aspep.o(.text.ASPEP_RXframeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ASPEP_RXframeProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data.aspepOverUartA)
</UL>
<P><STRONG><a name="[d]"></a>ASPEP_getBuffer</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, aspep.o(.text.ASPEP_getBuffer))
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data.aspepOverUartA)
</UL>
<P><STRONG><a name="[e]"></a>ASPEP_sendPacket</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, aspep.o(.text.ASPEP_sendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ASPEP_sendPacket &rArr; ASPEP_TXframeProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_TXframeProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data.aspepOverUartA)
</UL>
<P><STRONG><a name="[9c]"></a>ASPEP_start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, aspep.o(.text.ASPEP_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ASPEP_start
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[ff]"></a>Circle_Limitation</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, circle_limitation.o(.text.Circle_Limitation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Circle_Limitation
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[21]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g0xx_mc_it.o(.text.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; TSK_HighFrequencyTask &rArr; STO_PLL_CalcElAngle &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32g0xx_mc_it.o(.text.DMA1_Channel2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel2_3_IRQHandler &rArr; ASPEP_HWDataReceivedIT
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_HWDataReceivedIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32g0xx_mc_it.o(.text.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI4_15_IRQHandler &rArr; UI_HandleStartStopButton_cb &rArr; MC_StopMotor1 &rArr; MCI_StopMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FOC_CalcCurrRef</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mc_tasks.o(.text.FOC_CalcCurrRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FOC_CalcCurrRef &rArr; STC_CalcTorqueReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[57]"></a>FOC_Clear</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mc_tasks.o(.text.FOC_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FOC_Clear &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MF_StopProcessing
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[113]"></a>FOC_InitAdditionalMethods</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mc_tasks.o(.text.FOC_InitAdditionalMethods))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[124]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5b]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32g0xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Init &rArr; HAL_InitTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32g0xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_InitTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[5d]"></a>HAL_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32g0xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[65]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[60]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[62]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[61]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32g0xx_hal_cortex.o(.text.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6c]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim_ex.o(.text.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32g0xx_hal_msp.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[67]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[16]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_mc_it.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HardFault_Handler &rArr; TSK_HardwareFaultTask &rArr; R3_1_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>LL_ADC_Init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32g0xx_ll_adc.o(.text.LL_ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>LL_ADC_REG_Init</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, stm32g0xx_ll_adc.o(.text.LL_ADC_REG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_ADC_REG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>LL_GPIO_Init</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, stm32g0xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32g0xx_ll_rcc.o(.text.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_RCC_GetSystemClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[71]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, stm32g0xx_ll_rcc.o(.text.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_RCC_GetUSARTClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[f5]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_ll_utils.o(.text.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[122]"></a>LL_TIM_BDTR_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32g0xx_ll_tim.o(.text.LL_TIM_BDTR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_BDTR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>LL_TIM_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32g0xx_ll_tim.o(.text.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 700 bytes, Stack size 36 bytes, stm32g0xx_ll_tim.o(.text.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_TIM_OC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>LL_USART_Init</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32g0xx_ll_usart.o(.text.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>MCI_Clear_Iqdref</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mc_interface.o(.text.MCI_Clear_Iqdref))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_Clear_Iqdref
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetDefaultIqdref
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[75]"></a>MCI_ExecBufferedCommands</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mc_interface.o(.text.MCI_ExecBufferedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MCI_ExecBufferedCommands &rArr; STC_ExecRamp &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[92]"></a>MCI_ExecSpeedRamp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_ExecSpeedRamp))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramSpeedRampMotor1
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[d9]"></a>MCI_ExecTorqueRamp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_ExecTorqueRamp))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[78]"></a>MCI_FaultAcknowledged</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mc_interface.o(.text.MCI_FaultAcknowledged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCI_FaultAcknowledged
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCurrentFaults
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[f9]"></a>MCI_FaultProcessing</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_FaultProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[7b]"></a>MCI_GetAvrgMecSpeedUnit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mc_interface.o(.text.MCI_GetAvrgMecSpeedUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_GetAvrgMecSpeedUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[bf]"></a>MCI_GetControlMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[7a]"></a>MCI_GetCurrentFaults</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetCurrentFaults))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
</UL>

<P><STRONG><a name="[c0]"></a>MCI_GetFaultState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetFaultState))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[bd]"></a>MCI_GetIab</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetIab))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[cd]"></a>MCI_GetIalphabeta</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetIalphabeta))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[10a]"></a>MCI_GetImposedMotorDirection</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetImposedMotorDirection))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[ce]"></a>MCI_GetIqd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetIqd))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[c7]"></a>MCI_GetIqdref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetIqdref))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[c4]"></a>MCI_GetLastRampFinalDuration</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetLastRampFinalDuration))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[c3]"></a>MCI_GetLastRampFinalSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetLastRampFinalSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[c5]"></a>MCI_GetLastRampFinalTorque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetLastRampFinalTorque))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[7e]"></a>MCI_GetMecSpeedRefUnit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mc_interface.o(.text.MCI_GetMecSpeedRefUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_GetMecSpeedRefUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMecSpeedRefUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[81]"></a>MCI_GetOccurredFaults</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetOccurredFaults))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
</UL>

<P><STRONG><a name="[79]"></a>MCI_GetSTMState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetSTMState))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetSTMStateMotor1
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
</UL>

<P><STRONG><a name="[d8]"></a>MCI_GetTeref</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetTeref))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[d0]"></a>MCI_GetValphabeta</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetValphabeta))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[cf]"></a>MCI_GetVqd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetVqd))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[a5]"></a>MCI_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mc_interface.o(.text.MCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[de]"></a>MCI_SetCurrentReferences</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_SetCurrentReferences))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[80]"></a>MCI_StartMotor</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mc_interface.o(.text.MCI_StartMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCI_StartMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCurrentFaults
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetOccurredFaults
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor1
</UL>

<P><STRONG><a name="[82]"></a>MCI_StopMotor</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mc_interface.o(.text.MCI_StopMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCI_StopMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCurrentFaults
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetOccurredFaults
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
</UL>

<P><STRONG><a name="[83]"></a>MCI_StopRamp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mc_interface.o(.text.MCI_StopRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_StopRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_StopRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[fe]"></a>MCM_Clarke</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mc_math.o(.text.MCM_Clarke))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCM_Clarke
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[85]"></a>MCM_Park</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, mc_math.o(.text.MCM_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MCM_Park
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[87]"></a>MCM_Rev_Park</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mc_math.o(.text.MCM_Rev_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCM_Rev_Park
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[86]"></a>MCM_Trig_Functions</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, mc_math.o(.text.MCM_Trig_Functions))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcElAngle
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Rev_Park
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Park
</UL>

<P><STRONG><a name="[88]"></a>MCPA_cfgLog</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, mcpa.o(.text.MCPA_cfgLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MCPA_cfgLog
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetPtrReg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetIDSize
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[8b]"></a>MCPA_dataLog</STRONG> (Thumb, 476 bytes, Stack size 40 bytes, mcpa.o(.text.MCPA_dataLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MCPA_dataLog &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[118]"></a>MCPA_flushDataLog</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mcpa.o(.text.MCPA_flushDataLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MCPA_flushDataLog
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[8c]"></a>MCP_ReceivedPacket</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, mcp.o(.text.MCP_ReceivedPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MCP_ReceivedPacket &rArr; RI_SetRegCommandParser &rArr; MCPA_cfgLog
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProfilerCommand
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Clear_Iqdref
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopRamp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[a6]"></a>MC_APP_BootHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mc_app_hooks.o(.text.MC_APP_BootHook))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[97]"></a>MC_APP_PostMediumFrequencyHook_M1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mc_app_hooks.o(.text.MC_APP_PostMediumFrequencyHook_M1))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[90]"></a>MC_GetSTMStateMotor1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mc_api.o(.text.MC_GetSTMStateMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC_GetSTMStateMotor1
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
</UL>

<P><STRONG><a name="[8f]"></a>MC_ProfilerCommand</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_api.o(.text.MC_ProfilerCommand))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[91]"></a>MC_ProgramSpeedRampMotor1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc_api.o(.text.MC_ProgramSpeedRampMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC_ProgramSpeedRampMotor1
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_key_func
</UL>

<P><STRONG><a name="[93]"></a>MC_RunMotorControlTasks</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mc_tasks.o(.text.MC_RunMotorControlTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MC_RunMotorControlTasks &rArr; MC_Scheduler &rArr; MCP_ReceivedPacket &rArr; RI_SetRegCommandParser &rArr; MCPA_cfgLog
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[94]"></a>MC_Scheduler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, mc_tasks.o(.text.MC_Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MC_Scheduler &rArr; MCP_ReceivedPacket &rArr; RI_SetRegCommandParser &rArr; MCPA_cfgLog
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_APP_PostMediumFrequencyHook_M1
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[98]"></a>MC_StartMotor1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mc_api.o(.text.MC_StartMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MC_StartMotor1 &rArr; MCI_StartMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_key_func
</UL>

<P><STRONG><a name="[99]"></a>MC_StopMotor1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mc_api.o(.text.MC_StopMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MC_StopMotor1 &rArr; MCI_StopMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_key_func
</UL>

<P><STRONG><a name="[9a]"></a>MCboot</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, mc_tasks.o(.text.MCboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MCboot &rArr; STO_PLL_Init &rArr; STO_PLL_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_APP_BootHook
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetDefaultIqdref
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_HandleInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_start
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[a7]"></a>MX_MotorControl_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, motorcontrol.o(.text.MX_MotorControl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_MotorControl_Init &rArr; MCboot &rArr; STO_PLL_Init &rArr; STO_PLL_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_lock_pins
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>NTC_CalcAvTemp</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ntc_temperature_sensor.o(.text.NTC_CalcAvTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NTC_CalcAvTemp &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_SetFaultState
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[ae]"></a>NTC_Clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(.text.NTC_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
</UL>

<P><STRONG><a name="[cc]"></a>NTC_GetAvTemp_C</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(.text.NTC_GetAvTemp_C))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[a3]"></a>NTC_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ntc_temperature_sensor.o(.text.NTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NTC_Init &rArr; RCM_RegisterRegConv
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Clear
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_RegisterRegConv
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[ac]"></a>NTC_SetFaultState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(.text.NTC_SetFaultState))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
</UL>

<P><STRONG><a name="[c8]"></a>PID_GetKD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_GetKD))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[d5]"></a>PID_GetKDDivisorPOW2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_GetKDDivisorPOW2))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[ca]"></a>PID_GetKI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_GetKI))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[112]"></a>PID_GetKIDivisor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_GetKIDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[d6]"></a>PID_GetKIDivisorPOW2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_GetKIDivisorPOW2))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[cb]"></a>PID_GetKP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_GetKP))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[d7]"></a>PID_GetKPDivisorPOW2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_GetKPDivisorPOW2))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[9d]"></a>PID_HandleInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_HandleInit))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[58]"></a>PID_SetIntegralTerm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetIntegralTerm))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_ResetPLL
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_Clear
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_OTF_ResetPLL
</UL>

<P><STRONG><a name="[da]"></a>PID_SetKD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetKD))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[db]"></a>PID_SetKDDivisorPOW2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetKDDivisorPOW2))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[e0]"></a>PID_SetKI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetKI))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[af]"></a>PID_SetKIDivisorPOW2</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pid_regulator.o(.text.PID_SetKIDivisorPOW2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PID_SetKIDivisorPOW2
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetLowerIntegralTermLimit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetUpperIntegralTermLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[df]"></a>PID_SetKP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetKP))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[e1]"></a>PID_SetKPDivisorPOW2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetKPDivisorPOW2))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[b1]"></a>PID_SetLowerIntegralTermLimit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetLowerIntegralTermLimit))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKIDivisorPOW2
</UL>

<P><STRONG><a name="[b0]"></a>PID_SetUpperIntegralTermLimit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetUpperIntegralTermLimit))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKIDivisorPOW2
</UL>

<P><STRONG><a name="[ea]"></a>PI_Controller</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, pid_regulator.o(.text.PI_Controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PI_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcElAngle
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
</UL>

<P><STRONG><a name="[109]"></a>PQD_CalcElMotorPower</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pqd_motor_power_measurement.o(.text.PQD_CalcElMotorPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PQD_CalcElMotorPower
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[107]"></a>PQD_Clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pqd_motor_power_measurement.o(.text.PQD_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MF_StopProcessing
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[b2]"></a>PQD_GetAvrgElMotorPowerW</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pqd_motor_power_measurement.o(.text.PQD_GetAvrgElMotorPowerW))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PQD_GetAvrgElMotorPowerW &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[117]"></a>PWMC_CheckOverCurrent</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pwm_curr_fdbk.o(.text.PWMC_CheckOverCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMC_CheckOverCurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[b5]"></a>PWMC_CurrentReadingCalibr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pwm_curr_fdbk.o(.text.PWMC_CurrentReadingCalibr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWMC_CurrentReadingCalibr &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[fc]"></a>PWMC_GetPhaseCurrents</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pwm_curr_fdbk.o(.text.PWMC_GetPhaseCurrents))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMC_GetPhaseCurrents
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[101]"></a>PWMC_SetPhaseVoltage</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, pwm_curr_fdbk.o(.text.PWMC_SetPhaseVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWMC_SetPhaseVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[5a]"></a>PWMC_SwitchOffPWM</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pwm_curr_fdbk.o(.text.PWMC_SwitchOffPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMC_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingCalibr
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[10f]"></a>PWMC_SwitchOnPWM</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pwm_curr_fdbk.o(.text.PWMC_SwitchOnPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMC_SwitchOnPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>R3_1_CurrentReadingCalibration</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_CurrentReadingCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = R3_1_CurrentReadingCalibration &rArr; R3_1_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForPolarizationEnd
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_SwitchOnPWM
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_SwitchOffPWM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data.PWM_Handle_M1)
</UL>
<P><STRONG><a name="[8]"></a>R3_1_GetOffsetCalib</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_GetOffsetCalib))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data.PWM_Handle_M1)
</UL>
<P><STRONG><a name="[0]"></a>R3_1_GetPhaseCurrents</STRONG> (Thumb, 416 bytes, Stack size 20 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_GetPhaseCurrents))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R3_1_GetPhaseCurrents
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data.PWM_Handle_M1)
</UL>
<P><STRONG><a name="[34]"></a>R3_1_HFCurrentsCalibrationAB</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_HFCurrentsCalibrationAB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3_1_HFCurrentsCalibrationAB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[35]"></a>R3_1_HFCurrentsCalibrationC</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_HFCurrentsCalibrationC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3_1_HFCurrentsCalibrationC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[9b]"></a>R3_1_Init</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R3_1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[6]"></a>R3_1_IsOverCurrentOccurred</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_IsOverCurrentOccurred))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data.PWM_Handle_M1)
</UL>
<P><STRONG><a name="[f7]"></a>R3_1_OVERCURRENT_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_OVERCURRENT_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>R3_1_OVERVOLTAGE_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_OVERVOLTAGE_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[33]"></a>R3_1_SetADCSampPointCalibration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_SetADCSampPointCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R3_1_SetADCSampPointCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_WriteTIMRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[5]"></a>R3_1_SetADCSampPointSectX</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_SetADCSampPointSectX))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3_1_SetADCSampPointSectX
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_WriteTIMRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data.PWM_Handle_M1)
</UL>
<P><STRONG><a name="[7]"></a>R3_1_SetOffsetCalib</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_SetOffsetCalib))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data.PWM_Handle_M1)
</UL>
<P><STRONG><a name="[1]"></a>R3_1_SwitchOffPWM</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_SwitchOffPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R3_1_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MF_StopProcessing
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_CurrentReadingCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data.PWM_Handle_M1)
</UL>
<P><STRONG><a name="[2]"></a>R3_1_SwitchOnPWM</STRONG> (Thumb, 196 bytes, Stack size 20 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_SwitchOnPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R3_1_SwitchOnPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_CurrentReadingCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data.PWM_Handle_M1)
</UL>
<P><STRONG><a name="[f6]"></a>R3_1_TIMx_UP_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_TIMx_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R3_1_TIMx_UP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[4]"></a>R3_1_TurnOnLowSides</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_TurnOnLowSides))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R3_1_TurnOnLowSides
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data.PWM_Handle_M1)
</UL>
<P><STRONG><a name="[b7]"></a>R3_1_WriteTIMRegisters</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, r3_g0xx_pwm_curr_fdbk.o(.text.R3_1_WriteTIMRegisters))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_SetADCSampPointCalibration
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_SetADCSampPointSectX
</UL>

<P><STRONG><a name="[fd]"></a>RCM_ExecNextConv</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, regular_conversion_manager.o(.text.RCM_ExecNextConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCM_ExecNextConv
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[ab]"></a>RCM_ExecRegularConv</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, regular_conversion_manager.o(.text.RCM_ExecRegularConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecUserConv
</UL>

<P><STRONG><a name="[b8]"></a>RCM_ExecUserConv</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regular_conversion_manager.o(.text.RCM_ExecUserConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RCM_ExecUserConv &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
</UL>

<P><STRONG><a name="[100]"></a>RCM_ReadOngoingConv</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, regular_conversion_manager.o(.text.RCM_ReadOngoingConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCM_ReadOngoingConv
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[ad]"></a>RCM_RegisterRegConv</STRONG> (Thumb, 296 bytes, Stack size 20 bytes, regular_conversion_manager.o(.text.RCM_RegisterRegConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCM_RegisterRegConv
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
</UL>

<P><STRONG><a name="[b9]"></a>REMNG_Calc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ramp_ext_mngr.o(.text.REMNG_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = REMNG_Calc &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[bb]"></a>REMNG_ExecRamp</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, ramp_ext_mngr.o(.text.REMNG_ExecRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = REMNG_ExecRamp &rArr; getScalingFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getScalingFactor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[a4]"></a>REMNG_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ramp_ext_mngr.o(.text.REMNG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[fa]"></a>REMNG_RampCompleted</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ramp_ext_mngr.o(.text.REMNG_RampCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[89]"></a>RI_GetIDSize</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, register_interface.o(.text.RI_GetIDSize))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_cfgLog
</UL>

<P><STRONG><a name="[8a]"></a>RI_GetPtrReg</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, register_interface.o(.text.RI_GetPtrReg))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_cfgLog
</UL>

<P><STRONG><a name="[8e]"></a>RI_GetRegCommandParser</STRONG> (Thumb, 2196 bytes, Stack size 64 bytes, register_interface.o(.text.RI_GetRegCommandParser))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RI_GetRegCommandParser &rArr; PQD_GetAvrgElMotorPowerW &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKPDivisorPOW2
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKIDivisorPOW2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKDDivisorPOW2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_GetEstimatedBemf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_GetEstimatedCurrent
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetS16Speed
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_GetAvTemp_C
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKP
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKI
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKD
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetPhase
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_GetObservedBemfLevel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_GetEstimatedBemfLevel
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetNumberOfPhases
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_GetObserverGains
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetLastRampFinalDuration
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetLastRampFinalTorque
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetFaultState
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElAngle
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_GetAvrgElMotorPowerW
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetValphabeta
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetVqd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqdref
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIalphabeta
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIab
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetControlMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetLastRampFinalSpeed
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeedUnit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRefUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[8d]"></a>RI_SetRegCommandParser</STRONG> (Thumb, 1832 bytes, Stack size 88 bytes, register_interface.o(.text.RI_SetRegCommandParser))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RI_SetRegCommandParser &rArr; MCPA_cfgLog
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKPDivisorPOW2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKIDivisorPOW2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKI
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKP
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_cfgLog
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_SetPhase
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_SetObserverGains
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_GetObserverGains
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKDDivisorPOW2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKD
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetTeref
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqdref
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRefUnit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCurrentReferences
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecTorqueRamp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[e2]"></a>RUC_Clear</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, revup_ctrl.o(.text.RUC_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RUC_Clear &rArr; VSS_SetMecAcceleration &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAngle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[e6]"></a>RUC_Exec</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, revup_ctrl.o(.text.RUC_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RUC_Exec &rArr; VSS_SetMecAcceleration &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[102]"></a>RUC_FirstAccelerationStageReached</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, revup_ctrl.o(.text.RUC_FirstAccelerationStageReached))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[be]"></a>RUC_GetNumberOfPhases</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, revup_ctrl.o(.text.RUC_GetNumberOfPhases))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[c6]"></a>RUC_GetPhase</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, revup_ctrl.o(.text.RUC_GetPhase))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[a1]"></a>RUC_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, revup_ctrl.o(.text.RUC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RUC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[dd]"></a>RUC_SetPhase</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, revup_ctrl.o(.text.RUC_SetPhase))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[e7]"></a>RVBS_CalcAvVbus</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, r_divider_bus_voltage_sensor.o(.text.RVBS_CalcAvVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RVBS_CalcAvVbus &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CheckFaultState
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[e8]"></a>RVBS_CheckFaultState</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, r_divider_bus_voltage_sensor.o(.text.RVBS_CheckFaultState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RVBS_CheckFaultState
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
</UL>

<P><STRONG><a name="[e9]"></a>RVBS_Clear</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, r_divider_bus_voltage_sensor.o(.text.RVBS_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RVBS_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
</UL>

<P><STRONG><a name="[a2]"></a>RVBS_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, r_divider_bus_voltage_sensor.o(.text.RVBS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RVBS_Init &rArr; RCM_RegisterRegConv
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Clear
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_RegisterRegConv
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[7d]"></a>SPD_GetAvrgMecSpeedUnit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(.text.SPD_GetAvrgMecSpeedUnit))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeedUnit
</UL>

<P><STRONG><a name="[d1]"></a>SPD_GetElAngle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(.text.SPD_GetElAngle))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[fb]"></a>SPD_GetInstElSpeedDpp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(.text.SPD_GetInstElSpeedDpp))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[d2]"></a>SPD_GetS16Speed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, speed_pos_fdbk.o(.text.SPD_GetS16Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPD_GetS16Speed &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[ef]"></a>SPD_IsMecSpeedReliable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, speed_pos_fdbk.o(.text.SPD_IsMecSpeedReliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPD_IsMecSpeedReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_CalcAvrgMecSpeedUnit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcAvrgMecSpeedUnit
</UL>

<P><STRONG><a name="[56]"></a>STC_CalcTorqueReference</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, speed_torq_ctrl.o(.text.STC_CalcTorqueReference))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = STC_CalcTorqueReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[59]"></a>STC_Clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, speed_torq_ctrl.o(.text.STC_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STC_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[77]"></a>STC_ExecRamp</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, speed_torq_ctrl.o(.text.STC_ExecRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STC_ExecRamp &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetTorqueRef
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Exec
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
</UL>

<P><STRONG><a name="[ec]"></a>STC_ForceSpeedReferenceToCurrentSpeed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, speed_torq_ctrl.o(.text.STC_ForceSpeedReferenceToCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STC_ForceSpeedReferenceToCurrentSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[74]"></a>STC_GetDefaultIqdref</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, speed_torq_ctrl.o(.text.STC_GetDefaultIqdref))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Clear_Iqdref
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[7f]"></a>STC_GetMecSpeedRefUnit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_torq_ctrl.o(.text.STC_GetMecSpeedRefUnit))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRefUnit
</UL>

<P><STRONG><a name="[7c]"></a>STC_GetSpeedSensor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speed_torq_ctrl.o(.text.STC_GetSpeedSensor))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeedUnit
</UL>

<P><STRONG><a name="[eb]"></a>STC_GetTorqueRef</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_torq_ctrl.o(.text.STC_GetTorqueRef))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
</UL>

<P><STRONG><a name="[9f]"></a>STC_Init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, speed_torq_ctrl.o(.text.STC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[76]"></a>STC_SetControlMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_torq_ctrl.o(.text.STC_SetControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
</UL>

<P><STRONG><a name="[10d]"></a>STC_SetSpeedSensor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speed_torq_ctrl.o(.text.STC_SetSpeedSensor))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[84]"></a>STC_StopRamp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_torq_ctrl.o(.text.STC_StopRamp))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopRamp
</UL>

<P><STRONG><a name="[b]"></a>STO_OTF_ResetPLL</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_OTF_ResetPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STO_OTF_ResetPLL
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data.STO_M1)
</UL>
<P><STRONG><a name="[104]"></a>STO_PLL_CalcAvrgElSpeedDpp</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_PLL_CalcAvrgElSpeedDpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STO_PLL_CalcAvrgElSpeedDpp
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[ed]"></a>STO_PLL_CalcAvrgMecSpeedUnit</STRONG> (Thumb, 584 bytes, Stack size 48 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_PLL_CalcAvrgMecSpeedUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = STO_PLL_CalcAvrgMecSpeedUnit &rArr; SPD_IsMecSpeedReliable
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_IsMecSpeedReliable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[f0]"></a>STO_PLL_CalcElAngle</STRONG> (Thumb, 536 bytes, Stack size 112 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_PLL_CalcElAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = STO_PLL_CalcElAngle &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[f1]"></a>STO_PLL_Clear</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_PLL_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STO_PLL_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_Init
</UL>

<P><STRONG><a name="[9]"></a>STO_PLL_ForceConvergency1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_PLL_ForceConvergency1))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data.STO_M1)
</UL>
<P><STRONG><a name="[a]"></a>STO_PLL_ForceConvergency2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_PLL_ForceConvergency2))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data.STO_M1)
</UL>
<P><STRONG><a name="[d4]"></a>STO_PLL_GetEstimatedBemf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_PLL_GetEstimatedBemf))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[c1]"></a>STO_PLL_GetEstimatedBemfLevel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_PLL_GetEstimatedBemfLevel))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[d3]"></a>STO_PLL_GetEstimatedCurrent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_PLL_GetEstimatedCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[c2]"></a>STO_PLL_GetObservedBemfLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_PLL_GetObservedBemfLevel))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[c9]"></a>STO_PLL_GetObserverGains</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_PLL_GetObserverGains))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[9e]"></a>STO_PLL_Init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_PLL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = STO_PLL_Init &rArr; STO_PLL_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_Clear
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_HandleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[114]"></a>STO_PLL_IsObserverConverged</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_PLL_IsObserverConverged))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = STO_PLL_IsObserverConverged
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[c]"></a>STO_PLL_IsVarianceTight</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_PLL_IsVarianceTight))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data.STO_M1)
</UL>
<P><STRONG><a name="[dc]"></a>STO_PLL_SetObserverGains</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_PLL_SetObserverGains))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[f2]"></a>STO_ResetPLL</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sto_pll_speed_pos_fdbk.o(.text.STO_ResetPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STO_ResetPLL
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32g0xx_mc_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SysTick_Handler &rArr; MC_RunMotorControlTasks &rArr; MC_Scheduler &rArr; MCP_ReceivedPacket &rArr; RI_SetRegCommandParser &rArr; MCPA_cfgLog
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[f4]"></a>SystemClock_Config</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemClock_Config &rArr; HAL_InitTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32g0xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIM14_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32g0xx_it.o(.text.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM14_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32g0xx_mc_it.o(.text.TIM1_BRK_UP_TRG_COM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM1_BRK_UP_TRG_COM_IRQHandler &rArr; R3_1_TIMx_UP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_OVERVOLTAGE_IRQHandler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_OVERCURRENT_IRQHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_TIMx_UP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>TSK_ChargeBootCapDelayHasElapsedM1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_tasks.o(.text.TSK_ChargeBootCapDelayHasElapsedM1))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[6f]"></a>TSK_HardwareFaultTask</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mc_tasks.o(.text.TSK_HardwareFaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSK_HardwareFaultTask &rArr; R3_1_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultProcessing
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[52]"></a>TSK_HighFrequencyTask</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, mc_tasks.o(.text.TSK_HighFrequencyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = TSK_HighFrequencyTask &rArr; STO_PLL_CalcElAngle &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_dataLog
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_CalcElAngle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_ResetPLL
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcAvrgElSpeedDpp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcElAngle
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_d
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SetPhaseVoltage
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadOngoingConv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Rev_Park
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Limitation
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Clarke
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecNextConv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_GetPhaseCurrents
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetInstElSpeedDpp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_Calc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_RampCompleted
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Park
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElAngle
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_FirstAccelerationStageReached
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>TSK_MF_StopProcessing</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mc_tasks.o(.text.TSK_MF_StopProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSK_MF_StopProcessing &rArr; FOC_Clear &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetStopPermanencyTimeM1
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_Clear
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[96]"></a>TSK_MediumFrequencyTaskM1</STRONG> (Thumb, 800 bytes, Stack size 40 bytes, mc_tasks.o(.text.TSK_MediumFrequencyTaskM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TSK_MediumFrequencyTaskM1 &rArr; RUC_Clear &rArr; VSS_SetMecAcceleration &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_ExecRamp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Park
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElAngle
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetStartTransition
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_IsObserverConverged
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_FirstAccelerationStageReached
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_InitAdditionalMethods
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKIDivisor
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_TransitionEnded
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_CalcAvrgMecSpeedUnit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOnPWM
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_Clear
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ChargeBootCapDelayHasElapsedM1
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultProcessing
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Exec
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Clear
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetSpeedSensor
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_StopPermanencyTimeHasElapsedM1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetChargeBootCapDelayM1
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingCalibr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcAvrgMecSpeedUnit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_Clear
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MF_StopProcessing
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_Init
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_TurnOnLowSides
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_SwitchOffPWM
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCurrentFaults
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetOccurredFaults
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetImposedMotorDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[95]"></a>TSK_SafetyTask</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mc_tasks.o(.text.TSK_SafetyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TSK_SafetyTask &rArr; TSK_SafetyTask_PWMOFF &rArr; RVBS_CalcAvVbus &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecUserConv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[116]"></a>TSK_SafetyTask_PWMOFF</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, mc_tasks.o(.text.TSK_SafetyTask_PWMOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TSK_SafetyTask_PWMOFF &rArr; RVBS_CalcAvVbus &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_flushDataLog
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetFaultState
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CheckOverCurrent
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultProcessing
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_Clear
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
</UL>

<P><STRONG><a name="[10b]"></a>TSK_SetChargeBootCapDelayM1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_tasks.o(.text.TSK_SetChargeBootCapDelayM1))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[108]"></a>TSK_SetStopPermanencyTimeM1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_tasks.o(.text.TSK_SetStopPermanencyTimeM1))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MF_StopProcessing
</UL>

<P><STRONG><a name="[10c]"></a>TSK_StopPermanencyTimeHasElapsedM1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_tasks.o(.text.TSK_StopPermanencyTimeHasElapsedM1))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[11]"></a>UASPEP_IDLE_ENABLE</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart_aspep_driver.o(.text.UASPEP_IDLE_ENABLE))
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data.aspepOverUartA)
</UL>
<P><STRONG><a name="[10]"></a>UASPEP_INIT</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, usart_aspep_driver.o(.text.UASPEP_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UASPEP_INIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data.aspepOverUartA)
</UL>
<P><STRONG><a name="[12]"></a>UASPEP_RECEIVE_BUFFER</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usart_aspep_driver.o(.text.UASPEP_RECEIVE_BUFFER))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UASPEP_RECEIVE_BUFFER
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data.aspepOverUartA)
</UL>
<P><STRONG><a name="[13]"></a>UASPEP_SEND_PACKET</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usart_aspep_driver.o(.text.UASPEP_SEND_PACKET))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UASPEP_SEND_PACKET
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data.aspepOverUartA)
</UL>
<P><STRONG><a name="[54]"></a>UI_HandleStartStopButton_cb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mc_tasks.o(.text.UI_HandleStartStopButton_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UI_HandleStartStopButton_cb &rArr; MC_StopMotor1 &rArr; MCI_StopMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetSTMStateMotor1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor1
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, stm32g0xx_mc_it.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; ASPEP_HWDataTransmittedIT
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_HWDMAReset
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_HWDataTransmittedIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>VBS_GetAvBusVoltage_V</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bus_voltage_sensor.o(.text.VBS_GetAvBusVoltage_V))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_GetAvrgElMotorPowerW
</UL>

<P><STRONG><a name="[103]"></a>VBS_GetAvBusVoltage_d</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bus_voltage_sensor.o(.text.VBS_GetAvBusVoltage_d))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[110]"></a>VSS_CalcAvrgMecSpeedUnit</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, virtual_speed_sensor.o(.text.VSS_CalcAvrgMecSpeedUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VSS_CalcAvrgMecSpeedUnit &rArr; SPD_IsMecSpeedReliable
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_IsMecSpeedReliable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[105]"></a>VSS_CalcElAngle</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, virtual_speed_sensor.o(.text.VSS_CalcElAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VSS_CalcElAngle &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[e3]"></a>VSS_Clear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, virtual_speed_sensor.o(.text.VSS_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Init
</UL>

<P><STRONG><a name="[a0]"></a>VSS_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, virtual_speed_sensor.o(.text.VSS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VSS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[e5]"></a>VSS_SetMecAcceleration</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, virtual_speed_sensor.o(.text.VSS_SetMecAcceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VSS_SetMecAcceleration &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Exec
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
</UL>

<P><STRONG><a name="[e4]"></a>VSS_SetMecAngle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, virtual_speed_sensor.o(.text.VSS_SetMecAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VSS_SetMecAngle &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
</UL>

<P><STRONG><a name="[115]"></a>VSS_SetStartTransition</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, virtual_speed_sensor.o(.text.VSS_SetStartTransition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VSS_SetStartTransition
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[111]"></a>VSS_TransitionEnded</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, virtual_speed_sensor.o(.text.VSS_TransitionEnded))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[43]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[11b]"></a>exe_key_func</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, led_key.o(.text.exe_key_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = exe_key_func &rArr; MC_StopMotor1 &rArr; MCI_StopMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key_state
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramSpeedRampMotor1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor1
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>getScalingFactor</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ramp_ext_mngr.o(.text.getScalingFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getScalingFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_ExecRamp
</UL>

<P><STRONG><a name="[11c]"></a>get_key_state</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, led_key.o(.text.get_key_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_key_state
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_key_func
</UL>

<P><STRONG><a name="[3e]"></a>main</STRONG> (Thumb, 1580 bytes, Stack size 224 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = main &rArr; MX_MotorControl_Init &rArr; MCboot &rArr; STO_PLL_Init &rArr; STO_PLL_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_key_func
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_mode_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_BDTR_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a9]"></a>mc_lock_pins</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, mc_tasks.o(.text.mc_lock_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mc_lock_pins
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[b6]"></a>waitForPolarizationEnd</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pwm_common.o(.text.waitForPolarizationEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = waitForPolarizationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_CurrentReadingCalibration
</UL>

<P><STRONG><a name="[123]"></a>work_mode_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_handle.o(.text.work_mode_init))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_uidiv</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_divfast))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_ExecRamp
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Exec
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcAvrgMecSpeedUnit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_1_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_idiv</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text_divfast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAngle
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetS16Speed
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_CalcElAngle
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_Calc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_ExecRamp
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_CalcAvrgMecSpeedUnit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcAvrgMecSpeedUnit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_Init
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_GetAvrgElMotorPowerW
</UL>

<P><STRONG><a name="[158]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[51]"></a>ASPEP_TXframeProcess</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, aspep.o(.text.ASPEP_TXframeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ASPEP_TXframeProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_sendPacket
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[4f]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
